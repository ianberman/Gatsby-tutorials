// this file is a translator for markdown filename to post slug
const path = require(`path`)
// gatsby-source-filesystem plugin has function for creating slugs
const { createFilePath } = require("gatsby-source-filesystem")

// first exports an API function from Gatsby
// onCreateNode function is called whenever a new node (object) is created or updated
exports.onCreateNode = ({ node, getNode, actions }) => {
  const { createNodeField } = actions
  // MarkdownRemark node holds all post data/details
  if (node.internal.type === "MarkdownRemark") {
    // createFilePath automatically finds parent File node containing name info and creates slug
    const slug = createFilePath({ node, getNode, basePath: "pages" })
    // createNodeField function creates addtl fields on nodes generated by other functions
    createNodeField({
      node,
      name: "slug",
      value: slug,
    })
  }
}

// createPages API is called to programmatically add pages through GQL queries
// here queries above slug and logs result
exports.createPages = async ({ graphql, actions }) => {
  // **Note:** The graphql function call returns a Promise
  // see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise for more info
  const { createPage } = actions
  const result = await graphql(`
    query {
      allMarkdownRemark {
        edges {
          node {
            fields {
              slug
            }
          }
        }
      }
    }
  `)

  // for each resulting node created above...
  result.data.allMarkdownRemark.edges.forEach(({ node }) => {
    // create a page with the slug
    createPage({
      path: node.fields.slug,
      // using this component
      component: path.resolve(`./src/templates/blog-post.js`),
      context: {
        // Data passed to context is available
        // in page queries as GraphQL variables.
        slug: node.fields.slug,
      },
    })
  })
}
